// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/cluster-api-ipam-provider-infoblox/pkg/infoblox (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=ibmock/client.go -package=ibmock . Client
//

// Package ibmock is a generated GoMock package.
package ibmock

import (
	netip "net/netip"
	reflect "reflect"

	logr "github.com/go-logr/logr"
	infoblox "github.com/telekom/cluster-api-ipam-provider-infoblox/pkg/infoblox"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckDNSViewExists mocks base method.
func (m *MockClient) CheckDNSViewExists(view string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDNSViewExists", view)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDNSViewExists indicates an expected call of CheckDNSViewExists.
func (mr *MockClientMockRecorder) CheckDNSViewExists(view any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDNSViewExists", reflect.TypeOf((*MockClient)(nil).CheckDNSViewExists), view)
}

// CheckNetworkExists mocks base method.
func (m *MockClient) CheckNetworkExists(view string, subnet netip.Prefix) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNetworkExists", view, subnet)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNetworkExists indicates an expected call of CheckNetworkExists.
func (mr *MockClientMockRecorder) CheckNetworkExists(view, subnet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNetworkExists", reflect.TypeOf((*MockClient)(nil).CheckNetworkExists), view, subnet)
}

// CheckNetworkViewExists mocks base method.
func (m *MockClient) CheckNetworkViewExists(view string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNetworkViewExists", view)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNetworkViewExists indicates an expected call of CheckNetworkViewExists.
func (mr *MockClientMockRecorder) CheckNetworkViewExists(view any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNetworkViewExists", reflect.TypeOf((*MockClient)(nil).CheckNetworkViewExists), view)
}

// GetHostConfig mocks base method.
func (m *MockClient) GetHostConfig() *infoblox.HostConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostConfig")
	ret0, _ := ret[0].(*infoblox.HostConfig)
	return ret0
}

// GetHostConfig indicates an expected call of GetHostConfig.
func (mr *MockClientMockRecorder) GetHostConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostConfig", reflect.TypeOf((*MockClient)(nil).GetHostConfig))
}

// GetOrAllocateAddress mocks base method.
func (m *MockClient) GetOrAllocateAddress(networkView, dnsView string, subnet netip.Prefix, hostname, zone string, logger logr.Logger) (netip.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrAllocateAddress", networkView, dnsView, subnet, hostname, zone, logger)
	ret0, _ := ret[0].(netip.Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrAllocateAddress indicates an expected call of GetOrAllocateAddress.
func (mr *MockClientMockRecorder) GetOrAllocateAddress(networkView, dnsView, subnet, hostname, zone, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrAllocateAddress", reflect.TypeOf((*MockClient)(nil).GetOrAllocateAddress), networkView, dnsView, subnet, hostname, zone, logger)
}

// ReleaseAddress mocks base method.
func (m *MockClient) ReleaseAddress(networkView, dnsView string, subnet netip.Prefix, hostname string, logger logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseAddress", networkView, dnsView, subnet, hostname, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseAddress indicates an expected call of ReleaseAddress.
func (mr *MockClientMockRecorder) ReleaseAddress(networkView, dnsView, subnet, hostname, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseAddress", reflect.TypeOf((*MockClient)(nil).ReleaseAddress), networkView, dnsView, subnet, hostname, logger)
}
