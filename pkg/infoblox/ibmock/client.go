// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/cluster-api-ipam-provider-infoblox/pkg/infoblox (interfaces: Client)

// Package ibmock is a generated GoMock package.
package ibmock

import (
	netip "net/netip"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckNetworkExists mocks base method.
func (m *MockClient) CheckNetworkExists(arg0 string, arg1 netip.Prefix) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNetworkExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNetworkExists indicates an expected call of CheckNetworkExists.
func (mr *MockClientMockRecorder) CheckNetworkExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNetworkExists", reflect.TypeOf((*MockClient)(nil).CheckNetworkExists), arg0, arg1)
}

// CheckNetworkViewExists mocks base method.
func (m *MockClient) CheckNetworkViewExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNetworkViewExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNetworkViewExists indicates an expected call of CheckNetworkViewExists.
func (mr *MockClientMockRecorder) CheckNetworkViewExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNetworkViewExists", reflect.TypeOf((*MockClient)(nil).CheckNetworkViewExists), arg0)
}

// GetOrAllocateAddress mocks base method.
func (m *MockClient) GetOrAllocateAddress(arg0 string, arg1 netip.Prefix, arg2, arg3 string) (netip.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrAllocateAddress", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(netip.Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrAllocateAddress indicates an expected call of GetOrAllocateAddress.
func (mr *MockClientMockRecorder) GetOrAllocateAddress(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrAllocateAddress", reflect.TypeOf((*MockClient)(nil).GetOrAllocateAddress), arg0, arg1, arg2, arg3)
}

// ReleaseAddress mocks base method.
func (m *MockClient) ReleaseAddress(arg0 string, arg1 netip.Prefix, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseAddress indicates an expected call of ReleaseAddress.
func (mr *MockClientMockRecorder) ReleaseAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseAddress", reflect.TypeOf((*MockClient)(nil).ReleaseAddress), arg0, arg1, arg2)
}
